#
# Fairchild OWL
#

# camera description, for camera selection GUI and apps
# camera_class should be the manufacturer's name
#
camera_class:                  "Fairchild Imaging"
camera_model:                  "OWL CAM/CMOS-2K"
camera_info:                   "12-bit, dual ch., freerun, 2k lines/frame"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits from > 8-bit camera, set depth to 8 but
# leave extdepth set to actual depth, and adjust shift/mask accordingly
#
width:                         2048
height:                        1500
depth:                         12
extdepth:                      12

# serial on this guy is a little different -- faster baud rate,
# plus single-char ASCII commands with no terminating CR but some
# follow-on responses to commands that do take a CR (interactive
# model) so best to just use hex
#
serial_baud:                   38400

# send serial commands to camera to init to expected state.
# The OWL serial command format is Command<CR> value<CR>.
# in the absence of a serial-term indicating otherwise,
# serial_init will send a <CR> after every colon-separated
# command in the list. Per Fairchild's doc, the command to set
# freerun is SSM<CR> 1<CR>. Therefore....
#
serial_init:                   "SSM:1"

# mode control register bits (hex):
# 0-3: on/off state of mode control lines
# 4-7: which mode control line to send expose pulse for
#      triggered exposure or pulse-width triggering.
# usually 00 for free-running cameras, 10 for triggered
# or pulse-width cameras/modes
#
MODE_CNTL_NORM:                00

# camera link data path register bits:
# 0-3: number of bits per pixel - 1
# 4-7: number of channels - 1
#
CL_DATA_PATH_NORM:             1b

# camera link config register bits:
# 0: RGB (on for RGB color cameras only)
# 1: ignore data valid (on for most cameras though not all)
# 2: line scan (ties LV to FV in I/F xilinx)
# 3: disable ROI (rarely set)
# 4: unused
# 5: data valid invert (rare)
# 6-7: undefined
#
CL_CFG_NORM:                   06

# in dual-tap mode output we expect even/odd pixels
#
htaps:                         2

# region of interest start and area
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip
#
hskip: 0
hactv: 2048
vskip: 0
vactv: 1500
