#
# jai BM-500CL
#

# camera description, for camera selection GUI and apps
# camera_class should be the manufacturer's name
#
camera_class:                  "JAI"
camera_model:                  "BM-500CL"
camera_info:                   "2456 x 2058 8-bit 2-ch, monochrome, base mode, freerun"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         2536
height:                        2066
depth:                         8
extdepth:                      8

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             17

# camera link config register bits
# (arg is a 2-digit hex value, hexval shown in parens):
# 0 (01): RGB (set for RGB (except bayer). Applies to older/PCI, ignored on newer/PCIe)
# 1 (02): ignore data valid (on for most cameras though not all)
# 2 (04): generate an FVAL on every LVAL or vactv lines if bit 4 is set, for line scan cameras
# 3 (08): disable ROI (rarely set)
# 4 (10): generate an FVAL after every vactv lines if bit 2 is also set, for line scan cameras
# 5 (20): data valid invert (rare)
# 6 (40): RGB swap -- swap red/blue
# 7 (80): enable roi pad: if ROI > img output, will pad missing bytes
#
CL_CFG_NORM:                   02

# htaps/vtaps: if dual channel flag is ON (see CL_DATA_PATH_NORM) we need to
# set either htaps or vtaps to 2. Typcially it's htaps but depends on whether
# the two pixels that come out with each clock are both on the same line
# (uncomment htaps: 2) or on adjacent lines (uncomment vtaps: 2) 
#
htaps:	2
#vtaps: 	2

# interlace / reorder method
# only for interleaved and some dual tap cameras
# determines how image is deinterleaved for display -- WORD_INTLV is only
# one of many available methods -- see *_INTLV in pdv_dependent.h and
# camera configuration guide for more
#
method_interlace:	INVERT_RIGHT_INTLV

# the following directives can be used to send us any serial commands
# necessary to put the camera to put it into the expected state.
# serial_init takes a colon-separated list of ASCII commands, and should
# be used for cameras that use an ASCII serial command set. serial_binit
# takes a space-separated list of hex bytes, for cameras that use binary
# serial instead of ASCII.  Examples of commands that should be sent
# include those that put the camera into the desired trigger mode (e.g.
# continuous, triggered, controlled). Be sure to also configure the board
# for the matching mode, via MODE_CNTL_NORM and
# method_camera_shutter_timing.
#
# jai commands:
#			TR=0		: Trigger Mode = 0=continuous
#			SC=0		: Scan Format = 0=full frame
#			BA=2		: Bit Allocation = 0=8bit, 1=10bit, 2=12bit
#			PRGP=0	: Variable Partial Scan = 0=off, 1=on
#			VB=0		: Vertical binning = 0=off, 1=on
#			SM=0		: Shutter Mode = 0=9 fixed steps via SH, 1=programmable via PE
#			SH=0		: Shutter Speed = 0 - 10 (faster approaching 10)
#			PE=2		: Programmable Exposure = 2 - 2072
#			ASC=0		: Auto Shutter = 0=(1/15sec), 1=(1/250sec)
#
serial_init: "TR=0:SC=0:BA=0:PRGP=0:VB=0:SM=0:SH=0:ASC=0"

# exposure method and min/max; serial_exposure tells pdv_set_exposure what
# serial command to send along with the (integer) arg, min/max are only for
# use by applications such as pdvshow who can set the min/max of their sliders
# based on these values, retrieved via pdv_get_min_shutter, pdv_get_max_shutter
#
#serial_exposure: "set"
#shutter_speed_min: 10
#shutter_speed_max: 999989

# Serial termination Character
# defines the termination character(s) that will be sent after each
# serial command sent by the library subroutine pdv_serial_command, including
# those sent by serial_init (above).  If no serial_term is specified, the
# default, carriage return character (0d hex) will be sent. If some other
# sequence is needed, uncomment serial_term and insert the appropriate hex
# byte(s) separated by spaces.  serial_term only applies to EDT's
# ASCII-specific serial directives (e.g. serial_init) and library subroutines
# (pdv_serial_command),
# NOT binary ones (serial_binit, pdv_serial_binary_command).  To specify no
# serial terminator, call serial_term with an empty list <>
#
# COMMENTED OUT at this point now but should be '>' according to dalsa manual;
# need to verify that this works even with gcp
#
#serial_term: <3e>

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
hskip: 72
hactv: 2464
vskip: 8
vactv: 2058