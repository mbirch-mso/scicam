#
# dalsa 4M30 / 4M60
#
# 4M30 is 65 or 80 MHz clock, 2 taps, 8 or 10 bits
# 4M60 is 65 or 80 MHz clock, 2 or 4 taps, 8 or 10 bits
#

# camera description, for camera selection GUI and apps
#
camera_class:                  "Dalsa"
camera_model:                  "4M30 / 4M60"
camera_info:                   "2352x1728 8-bit, 2-tap bayer color, board trig."

# width/height/depth
#
width:                         2352
height:                        1728
depth:                         24
extdepth:                      8

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             17

# camera link config register bits (arg is a 2-digit hex value):
# 0: RGB (on for RGB color cameras only)
# 1: ignore data valid (on for most cameras though not all)
# 2: generate an FVAL on every LVAL, for line scan cameras
# 3: disable ROI (rarely set)
# 4: generate an FVAL after every vactv lines, for line scan cameras
# 5: data valid invert (rare)
# 6-7: undefined
CL_CFG_NORM:                   02

# htaps/vtaps: if dual channel flag is ON (see CL_DATA_PATH_NORM) we need to
# set either htaps or vtaps to 2. Typcially it's htaps but depends on whether
# the two pixels that come out with each clock are both on the same line
# (uncomment htaps: 2) or on adjacent lines (uncomment vtaps: 2) 
#
htaps:	2

# enable bayer decoding in library
#
method_interlace: BGGR
kbs_red_row_first: 1
kbs_green_pixel_first: 0

# serial setup commands to send to camera to set up for this specific mode
#
# dalsa commands:
#      clm 2 = base mode, 2-taps, 8 bits 
#      sem 2 = internal (camera) frame rate and exposure (freerun)
#      sem 3 = external frame rate and internal (camera) exposure (triggered)
#      sot 130 or 160 = data rate (65 or 80 MHz)
#
serial_init: "clm 2:sem 2:sot 160"

# Mode Control register (hex)
# Hex value -- the left-most nibble determines which CC line is toggled for the
# outgoing EXPOSE pulse (if method_camera_shutter_timing is other than AIA_SERIAL).
# The right-most nibble determines which of the CC lines are held permanently
# high or low.  Typically this is set automatically by merthod_camera_timing
# (to 10 hex for triggered and MCL modes, 00 otherwise).  However if your
# camera needs it set otherwise, use this directive to do so.
#
# MODE_CNTL_NORM: 10

# exposure method and min/max; serial_exposure tells pdv_set_exposure what
# serial command to send along with the (integer) arg, min/max are only for
# use by applications such as pdvshow who can set the min/max of their sliders
# based on these values, retrieved via pdv_get_min_shutter, pdv_get_max_shutter
#
serial_exposure: "set"
shutter_speed_min: 10
shutter_speed_max: 999989

# Serial termination Character
# defines the termination character(s) that will be sent after each
# serial command sent by the library subroutine pdv_serial_command, including
# those sent by serial_init (above).  If no serial_term is specified, the
# default, carriage return character (0d hex) will be sent. If some other
# sequence is needed, uncomment serial_term and insert the appropriate hex
# byte(s) separated by spaces.  serial_term only applies to EDT's
# ASCII-specific serial directives (e.g. serial_init) and library subroutines
# (pdv_serial_command),
# NOT binary ones (serial_binit, pdv_serial_binary_command).  To specify no
# serial terminator, call serial_term with an empty list <>
#
# COMMENTED OUT at this point now but should be '>' according to dalsa manual;
# need to verify that this works even with gcp
#
#serial_term: <3e>

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
#hskip: 0
#hactv: 2352
#vskip: 0
#vactv: 1728

# not required, but helpful because it biases the automatic timeout value
# that is set during initcam so it's not inordinately long . Also may be
# useful for applications to know this. note that since it's dual-channel
# we make it 160
#
pclock_speed: 160

