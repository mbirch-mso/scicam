#
# IDT m5 full mode
#

# camera identification:
# class is usually just the manufacturer, model/info combined should always be unique
#
camera_class:                  "IDT"
camera_model:                  "M5"
camera_info:                   "8-bit 10-tap camera link, monochrome"

# actual size/depth
width:                         2320
height:                        1728
depth:                         8
extdepth:                      8

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits:
# 0-3: number of bits per pixel minus 1
# 4-7: number of channels minus 1
#
CL_DATA_PATH_NORM:             97

# htaps/vtaps: if dual channel flag is ON (see CL_CFG_NORM) we need to set
# either htaps or vtaps to 2. Which one depends on whether the two pixels
# that come out with each clock are both on the same line (uncomment
# htaps: 2) or on adjacent lines (uncomment vtaps: 2) 
#
htaps:	10
vtaps:	1

# camera link config register bits (hex value):
# 0: RGB (on for RGB color cameras only)
# 1: ignore data valid (on for most cameras though not all)
# 2: line scan
# 3: disable ROI (rarely set)
# 4: unused
# 5: data valid invert (rare)
# 6-7: undefined
#
CL_CFG_NORM:                   02

# too fast (too short of an intrframe gap) for normal ops; so we don't do interrupts except
# for the first one, and instead just read in whenever FVAL is high. disadvantage is that
# the driver won't detect underruns/issue timeouts, leading to a persistently out-of-synch
# condition if underruns occur. the good news: now we have method_framesync (see next)
#
fv_once: 1

# new as of 5.3.9.6 and later, uncomment the next directive to check for synch via added IRIG2
# header data; lets us detect underruns and get a timeout even in continuous or fv_once mode 
#
#method_framesync: EMULATE_TIMEOUT

