#
# Basler Ace 2000-340kc
# 2046 x 1086 x 8 x 2 taps, Bayer
# 82 MHz pixel clock
#
# currently only the EDT PCIe8 DV C-Link suppports this camera.
# must be flashed with pe8dvcamlk_fm.bit or other full mode FPGA file
#

# camera description, for camera selection GUI and apps
#
camera_class:                  "Basler"
camera_model:                  "acA2000-340kc"
camera_info:                   "2046x1086 2-tap 8-bit, Bayer, freerun"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         2046
height:                        1086
depth:                         24
extdepth:                      8

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             17

# camera link config register bits
# (argument is a 2-digit hex value, hexval shown in parens):
# 0 (01): RGB (on for RGB color cameras only)
# 1 (02): ignore data valid (on for most cameras though not all)
# 2 (04): generate an FVAL on every LVAL, for line scan cameras
# 3 (08): disable ROI (rarely set)
# 4 (10): generate an FVAL after every vactv lines, for line scan cameras
# 5 (20): data valid invert (rare)
# 6 (40): RGB swap -- swap red/blue
# 7 (80): enable roi pad: if ROI > img output, will pad missing bytes
#
CL_CFG_NORM:                   02

# Enable fast re-arm of acquisition
# Re-arm acquisition on falling edge of FVAL
#
#CL_CFG2_NORM:                 40

# BAYER DECODING
#
# turns on library interlace/reorder method 
# BGGR enables bayer decoding 8 bits; use BBGR_WORD for 10-12 bits
#
method_interlace:              BGGR

# depending on bayer filter on the sensor, these directives may need to
# be played with (switch 0 to 1 or vice versa on one or the other) to 
# get the bayer algorithm to match the output of the sensor and make
# the colors come out right
#
# Bayer pattern is GB/RG
#
kbs_red_row_first:             0
kbs_green_pixel_first:         1

# freerun, no EXSYNC (CC1) or anything set
#
# MODE_CNTL_NORM:              00

# htaps/vtaps
#
htaps:                         2
#vtaps:                        1

# initalize the camera using Basler Binary Protocol II
#
# some basler ace specific commands:
#
#	Freerun:        "01 01 04 04 01 04 00 00 00 00 00 03"
#	Triggered:      "01 01 04 04 01 04 00 01 00 00 00 03"
#
#	82 MHz:         "01 01 04 44 07 00 00 17 00 00 00 03"
#	65 MHz:         "01 01 04 44 07 00 00 10 00 00 00 03"
#	48 MHz:         "01 01 04 44 07 00 00 0a 00 00 00 03"
#
#	2-tap:          "01 01 04 24 07 00 00 01 00 00 00 03"
#	4-tap:          "01 01 04 24 07 00 00 09 00 00 00 03"
#	8-tap:          "01 01 04 24 07 00 00 0c 00 00 00 03"
#	10-tap:         "01 01 04 24 07 00 00 0e 00 00 00 03"
#
#	8-bit Bayer GB: "01 01 04 24 00 03 00 0c 00 00 00 03"
#
#	test ptrn on:   "01 01 04 64 01 03 00 01 00 00 00 03"
#	test ptrn off:  "01 01 04 64 01 03 00 00 00 00 00 03"
#
# Use the following init line for Freerun/48MHz/Base/2-tap/Bayer GB 8-bit/live image
 serial_binit: "010104040104000000000003 010104440700001700000003 010104240700000100000003 010104240003000c00000003 010104640103000000000003"

# pdvshow wants an 8-byte boundary, so
# to get an image displayed within pdvshow
# use ROI to grab only 2040 pixels per line
#
#hactv: 2040