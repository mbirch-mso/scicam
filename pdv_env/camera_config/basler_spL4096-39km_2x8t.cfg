#
# Basler Sprint 4096-39km
# 4096 x 1024 x 8 x 2 taps
# 80 MHz pixel clock
#
# currently only the EDT PCIe8 DV C-Link suppports this camera.
# must be flashed with pe8dvcamlk_fm.bit or other full mode FPGA file
#

# camera description, for camera selection GUI and apps
#
camera_class:                  "Basler"
camera_model:                  "spL4096-39km"
camera_info:                   "4096x1024 2-tap 8-bit, extsync"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         4096
height:                        1024
depth:                         8
extdepth:                      8

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             17

# camera link config register bits
# (argument is a 2-digit hex value, hexval shown in parens):
# 0 (01): RGB (on for RGB color cameras only)
# 1 (02): ignore data valid (on for most cameras though not all)
# 2 (04): generate an FVAL on every LVAL, for line scan cameras
# 3 (08): disable ROI (rarely set)
# 4 (10): generate an FVAL after every vactv lines, for line scan cameras
# 5 (20): data valid invert (rare)
# 6 (40): RGB swap -- swap red/blue
# 7 (80): enable roi pad: if ROI > img output, will pad missing bytes
#
CL_CFG_NORM:                   16

# freerun, no EXSYNC (CC1) or anything set
#
# MODE_CNTL_NORM: 00

# EXSYNC Via (CC1) EDT Board Generated
#
MODE_CNTL_NORM: 10
# method_camera_shutter_timing:	AIA_MCL_100US
method_frame_timing: FMRATE_ENABLE
frame_period: 26
xregwrite_16: 40
photo_trig: 1


# htaps/vtaps
#
htaps:	2
#vtaps:	1

# initalize the camera using Basler Binary Protocol II
#
# some basler sprint specific commands:
#
#	Freerun:		"01 04 01 01 14 02 12 03"
#	Triggered:		"01 04 01 01 14 06 16 03"
#
#	80 MHz:		"01 04 01 01 39 0e 33 03"
#	40 MHz:		"01 04 01 01 39 06 3b 03"
#
#	2-tap/8-bit:	"01 04 01 01 17 01 12 03"
#	2-tap/10-bit:	"01 04 01 01 17 03 10 03"
#	2-tap/12-bit:	"01 04 01 01 17 05 16 03"
#
#	test ptrn off:	"01 04 01 01 18 00 1c 03"
#	test ptrn on :	"01 04 01 01 18 01 1d 03"
#
# Use the following init line for Freerun/80MHz/Base/2-tap.8-bit/no test pattern
# serial_binit: "0104010114021203 01040101390e3303 0104010117011203 0104010118011d03"

# Use the following init line for EXTRIG/80MHz/Base/2-tap.8-bit/no test pattern
serial_binit: "0104010114061603 01040101390e3303 0104010117011203 0104010118001c03"

# Use the following init line for Freerun/80MHz/Base/2-tap.8-bit/with test pattern
# serial_binit: "0104010114021203 01040101390e3303 0104010117011203 0104010118001c03"

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
hskip: 0
hactv: 4096
vskip: 0
vactv: 1024

