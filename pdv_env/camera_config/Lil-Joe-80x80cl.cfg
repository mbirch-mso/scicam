#
# SciMeasure Lil-Joe 80x80 Camera Link
#

# camera description, for camera selection GUI and apps
# camera_class should be the manufacturer's name
#
camera_class:                  "SciMeasure"
camera_model:                  "Lil Joe"
camera_info:                   "80 x 80 14-bit 4-tap Camera Link"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         80
height:                        80
depth:                         14
extdepth:                      14

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             3d

# camera link config register bits
# (arg is a 2-digit hex value, hexval shown in parens):
# 0 (01): RGB (on for RGB color cameras only)
# 1 (02): ignore data valid (on for most cameras though not all)
# 2 (04): generate an FVAL on every LVAL, for line scan cameras
# 3 (08): disable ROI (rarely set)
# 4 (10): generate an FVAL after every vactv lines, for line scan cameras
# 5 (20): data valid invert (rare)
# 6 (40): RGB swap -- swap red/blue
# 7 (80): enable roi pad: if ROI > img output, will pad missing bytes
#
CL_CFG_NORM:                   08

# interlace method
# DALSA_2CH is what worked with the last 1024 Lil-Joe we had but QUADRANT_INTLV
# was used with the 80x80 non camera-link. So if the image is skewed or broken,
# comment out one or the other or both of the below to find the method that works
#
#method_interlace:		DALSA_2CH_INTLV
method_interlace:			QUADRANT_INTLV

# probably not needed but scimeasure has it here so....
#
continuous:			1

# Testing suggests this is needed but comment it out or set to 1 if pixels
# look funny (noisy, really dark or bright)
#
byteswap:                      0

# really small camera may or may not need this but the only hit would be 
# longer waits after a timeout 
#
timeout_multiplier:		4

# baud rate to match the camera
#
serial_baud:			38400

# gain min/max only for application hints (limits for sliders and such
# -- see pdv_get_min_gain, pdv_get_max_gain in API)
#
gain_min:                      0
gain_max:                      31

# offset min/max only for application hints (limits for sliders and such
# -- see pdv_get_min_offset, pdv_get_max_offset in API)
#
offset_min:			0
offset_max:			1023

# serial command for pdv_set_gain -- pdv_set_gain will send the string
# followed by the (integer) argument as ascii -- works only with cameras
# that have ascii command sets and ascii representations of integer
# arguments, otherwise use pdv_serial_command or pdv_serial_binary_command
# in your app
#
serial_gain:	"@RCL "

# serial command to enable pdv_set_offset -- pdv_set_offset will send the string
# followed by the (integer) argument as ascii -- works only with cameras
# that have ascii command sets and ascii representations of integer
# arguments, otherwise use pdv_serial_command or pdv_serial_binary_command
# in your app
#
serial_offset:	"@OAC "

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
#hskip: 0
#hactv: 80
#vskip: 0
#vactv: 80

