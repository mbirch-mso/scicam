#
# PCO.1600
#
# Basic config for the PCO 1600 camera, in continuous output mode.
# The PCO 1600 is fairly dependent the PCO software and supported framegrabbers
# which to date (7/11/2007) have not been fully integrated with the PCI DV.
# The EDT serial DLL does work with their sc2_clser_control.exe camera control
# app under Windows, but not other PCO applications.  Therefore, except for
# programmers who is experienced with calera-FG integration issues, full
# functionality of the camera is somewhat limited, especially on non-Windows
# platforms. That being said this config will get you going in freerun mode,
# and if on Windows you will be able to change use the aforementioned serial
# app to configure the camera's gain, exposure time. etc. Work is ongoing to
# fully integrate EDT boards with PCO cameras.
#

# camera description, for camera selection GUI and apps
# camera_class should be the manufacturer's name
#
camera_class:                  "PCO"
camera_model:                  "1600"
camera_info:                   "1600x1200x16 (80 MHz single ch., freerun)"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         1600
height:                        1200
depth:                         16
extdepth:                      16

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits (hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             0f

# camera link config register bits (hex value):
# 0: RGB (on for RGB color cameras only)
# 1: ignore data valid (on for most cameras though not all)
# 2: line scan
# 3: disable ROI (rarely set)
# 4: unused
# 5: data valid invert (rare)
# 6-7: undefined
#
CL_CFG_NORM:                   02

#htaps:	2
#vtaps: 2

# interlace method
# only for interleaved and some dual channel cameras
# determines how image is deinterleaved for display -- WORD_INTLV is only
# one of many available methods -- see *_INTLV in pdv_dependent.h and
# camera configuration guide for more
#
#method_interlace:	WORD_INTLV

# the following directives can be used to send us any serial commands
# necessary to put the camera to put it into the expected state.
# serial_init takes a colon-separated list of ASCII commands, and should
# be used for cameras that use an ASCII serial command set. serial_binit
# takes a space-separated list of hex bytes, for cameras that use binary
# serial instead of ASCII.  Examples of commands that should be sent
# include those that put the camera into the desired trigger mode (e.g.
# continuous, triggered, controlled). Be sure to also configure the board
# for the matching mode, via MODE_CNTL_NORM and
# method_camera_shutter_timing.
#
serial_timeout: 750

#PCO camera init
#
# set_cl_configuration (80 MHz): 16350c0000b4c404000101d5
#        OR            (40MHz):  16350c00005a620200010117
# set_bit_alignment (MSB): 150a0700000026
# set_pixel_rate: 11070900005a6202df
# set_adc_mode: 110d0700020027
# set_exposure_time: 12020d00000000000a0000002b
# arm_camera: 140a050023
# set_recorder_state: 14060700010022
#
serial_binit: "16350c0000b4c404000101d5 150a0700000026 11070900005a6202df 110d0700020027 12020d00000000000a0000002b 140a050023 14060700010022"


# Shutter timing method:
#   set to AIA_SERIAL (or leave out) for freerun cameras
#   set to AIA_TRIG for triggered 
#   set to AIA_MCL for pulse-width triggered -- that is, the duration of the
#     TRUE pulse determines the exposure time, range 1-25500 milliseconds
#   set to AIA_MCL_100US for pulse-width with a range of 1-25500 microseconds
#
# Related directives are shutter_speed_min/max and serial_exposure directives
# -- see the camera configuration guide.
#
#method_camera_shutter_timing: AIA_SERIAL
#method_camera_shutter_timing: AIA_TRIG
#method_camera_shutter_timing: AIA_MCL
#method_camera_shutter_timing: AIA_MCL_100US

# Mode Control register (hex)
# Hex value -- the left-most nibble determines which CC line is toggled for
# the EXPOSE pulse (if method_camera_shutter_timing is other than AIA_SERIAL).
# The right-most nibble determines which of the CC lines are held permanently
# high or low.  Typically this is set automatically by merthod_camera_timing
# (to 10 hex for triggered and MCL modes, 00 otherwise).  However if your
# camera needs it set otherwise, use this directive to do so.
#
# MODE_CNTL_NORM: 10

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
#hskip: 0
#hactv: 1600
#vskip: 0
#vactv: 1200

pclock_speed: 80
