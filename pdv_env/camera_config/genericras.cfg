#
# Generic 8 bit monochrome, same as generic8cl.cfg but with the addition
# of markras and markbin directives put a counter on the images.
#
# This is a generic camera configuration file, intended as a starting 
# place for creating a file for a new camera.  See the PCI DV User's
# guide for general information on configuration files, and the Camera
# Configuration Guide for detailed descriptions of the config file
# directives and arguments. 
#
# Unmodified, this file should work for a single-channel Camera-Link
# camera that outputs data continuously (no trigger required) in
# 1024x1024, 8-bits per pixel with the LSB on VD0 or MSB0. The image
# capture library will return a buffer with 8-bit per pixel monochrome
# data.
#

# camera description, for camera selection GUI and apps
# camera_class should be the manufacturer's name
#
camera_class:                  "Generic"
camera_model:                  "Camera Link 8-bit"
camera_info:                   "512x512 with markras / markbin image counters"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         512
height:                        512
depth:                         8
extdepth:                      8

# rbtfile specifies the FPGA file to be loaded (almost always aiag.bit), for
# boards that have a separate UI FPGA.  Newer boards (PCIe, Camera Link)
# employ a single combined PCIe/UI FPGA; this directive will be ignored in
# those cases. Nevertheless, an rbtfile should be specified in case the config
# ever gets used with a board that needs it.
#
rbtfile: aiagcl.bit

# camera link data path register bits (hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             07

# camera link config register bits (hex value):
# 0: RGB (on for RGB color cameras only)
# 1: ignore data valid (on for most cameras though not all)
# 2: line scan
# 3: disable ROI (rarely set)
# 4: unused
# 5: data valid invert (rare)
# 6-7: undefined
#
CL_CFG_NORM:                   02

# htaps/vtaps: if dual channel flag is ON (see CL_CFG_NORM) we need to set
# either htaps or vtaps to 2. Typcially it's htaps but depends on whether
# the two pixels that come out with each clock are both on the same line
# (uncomment htaps: 2) or on adjacent lines (uncomment vtaps: 2) 
#
#htaps:	2
#vtaps: 2

# interlace method
# only for interleaved and some dual channel cameras
# determines how image is deinterleaved for display -- BYTE_INTLV is only
# one of many available methods -- see *_INTLV in pdv_dependent.h and
# camera configuration guide for more
#
#method_interlace:	BYTE_INTLV

# the following directives can be used to send us any serial commands
# necessary to put the camera to put it into the expected state.
# serial_init takes a colon-separated list of ASCII commands, and should
# be used for cameras that use an ASCII serial command set. serial_binit
# takes space-separated groups of hex bytes, for cameras that use binary
# serial instead of ASCII; each group gets send as a separate command with
# a serial_read of the response (thrown away) between each.  Examples of
# commands that should be sent include those that put the camera into the
# desired trigger mode (e.g. continuous, triggered, controlled), #bits and
# channels, etc. The idea is to set the camera mode to match how the rest
# of the config directives are setting up the FG board.
#
#serial_init: "CMD 1:CMD 2:CMD 3"
#serial_binit: "00 11 aa bb" or "001122 aabbccddeeff"

# Serial termination Character
# defines the termination character(s) that will be sent after each
# serial command sent by the library subroutine pdv_serial_command, including
# those sent by serial_init (above).  If no serial_term is specified, the
# default, carriage return character (0d hex) will be sent. If some other
# sequence is needed, uncomment serial_term and insert the appropriate hex
# byte(s) separated by spaces.  serial_term only applies to EDT's
# ASCII-specific serial directives (e.g. serial_init) and library subroutines
# (pdv_serial_command),
# NOT binary ones (serial_binit, pdv_serial_binary_command).  To specify no
# serial terminator, call serial_term with an empty list <>
#
#serial_term: <0d>

# Shutter timing method:
#   set to AIA_SERIAL (or leave out) for freerun cameras
#   set to AIA_TRIG for triggered 
#   set to AIA_MCL for pulse-width triggered -- that is, the duration of the
#     TRUE pulse determines the exposure time, range 1-25500 milliseconds
#   set to AIA_MCL_100US for pulse-width with a range of 1-25500 microseconds
#
# Related directives are shutter_speed_min/max and serial_exposure directives
# -- see the camera configuration guide.
#
#method_camera_shutter_timing: AIA_SERIAL
#method_camera_shutter_timing: AIA_TRIG
#method_camera_shutter_timing: AIA_MCL
#method_camera_shutter_timing: AIA_MCL_100US

# Mode Control register (hex)
# Hex value -- the left-most nibble determines which CC line is toggled for
# the EXPOSE pulse (if method_camera_shutter_timing is other than AIA_SERIAL).
# The right-most nibble determines which of the CC lines are held permanently
# high or low.  Typically this is set automatically by merthod_camera_timing
# (to 10 hex for triggered and MCL modes, 00 otherwise).  However if your
# camera needs it set otherwise, use this directive to do so.
#
# MODE_CNTL_NORM: 10

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
#hskip: 0
#hactv: 1024
#vskip: 0
#vactv: 1024

# markras: enables frame-stamping of the images -- image acquisition
# subroutines will put a 32 x 8 pixel frame-counter stamp at image
# coordinates markrx, markry. Similarly, markbin enables and tells where to
# replace four adjacent bytes (four pixels with an 8-bit image, two pixels
# with a 10-16 bit image) with a 32-bit counter representing the frame count
# starting at the pixel. The frame count in both cases is initialized to 0
# when the device is opened by an application.
#
markras:	1
markry:		100
markrx:		200
markbin:	4
