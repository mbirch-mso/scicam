# C-Cam FCi4-14000
#
# Seeing 169 us/raster, active part is only 1524/40MHz = 38 us
# This config file works. With height=4561, it times out 128 bytes
# short of 3048*4560*12/8
# IMPORTANT: requires a bunch of serial commands after init to initialize
# the camera; must be done with a script not serial_init; see below
#

# camera description, for camera selection GUI and apps
# camera_class should be the manufacturer's name
#
camera_class:                  "C-Cam"
camera_model:                  "FCi4-14000 12 bit"
camera_info:                   "3048x4560 (dual tap, freerun)"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         3048 
height:                        4560
depth:                         12
extdepth:                      12

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits (hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             1b

# two taps, horizontal
#
htaps:	2

# camera link config register bits (hex value):
# 0: RGB (on for RGB color cameras only)
# 1: ignore data valid (on for most cameras though not all)
# 2: line scan
# 3: disable ROI (rarely set)
# 4: unused
# 5: data valid invert (rare)
# 6-7: undefined
#
CL_CFG_NORM:                   08

# no serial_init here because the sequence to start the C-Cam
# is too long for the poor little 70-char serial_init buffer. instead
# use a script; see below (note: if you did put serial_init here,
# also set serial_prefix to ":" and omit the ':' in each command since
# that's also the serial_init command separator)
#
#serial_prefix: ":"
#serial_init: nothing

# Mode Control register (hex)
# Hex value -- the left-most nibble determines which CC line is toggled for
# the EXPOSE pulse (if method_camera_shutter_timing is other than AIA_SERIAL).
# The right-most nibble determines which of the CC lines are held permanently
# high or low.  Typically this is set automatically by merthod_camera_timing
# (to 10 hex for triggered and MCL modes, 00 otherwise).  However if your
# camera needs it set otherwise, use this directive to do so.
#
#MODE_CNTL_NORM: 10

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
#hskip: 0
#hactv: 1024
#vskip: 0
#vactv: 1024


#    Here's a script from C-Cam to set it up, 
#    but must make it Intel Hex Format using python script below
#    
#    ; Command file for FCi4-14000
#    ;-----------------------------
#    ; Starts the camera in continuous mode with full WOI
#    
#    *******
#    * WOI *
#    *******
#    FC34	; xstart
#    FE00	; 0
#    FE00
#    FC36	; xend
#    FEE7	; 0xBE7 = 3047
#    FE0B
#    FC38	; ystart
#    FE00	; 0
#    FE00
#    FC3A	; yend
#    FECF	; 0x11CF = 4559
#    FE11
#    C001	; x increment = 1
#    D001	; y increment = 1
#    
#    ********************
#    * Integration Time *
#    ********************
#    E301	; integration time = 700 ms
#    E260	; (0x1607a60 / 33 = 700000 us)
#    E17A
#    E060
#    
#    *************
#    * Data mode *
#    *************
#    E708	; 12 bit image mode OR E728 for 12 bit counter mode
#    
#    *********
#    * Start *
#    *********
#    FF86	; start timed

#    
#    



# Here's the python script that read the above text file to create commands
#    #serial_cmd ":020000BCFFFD46"        #reset
#    import sys
#    
#    fin = open(sys.argv[1], 'r')
#    while 1:
#        cmd = fin.readline()
#        if cmd=="": sys.exit()
#        cmd = cmd.split()
#        if len(cmd)==0: continue
#        c=cmd[0][0]
#        if c=='#' or c==';' or c=='*':  continue
#      
#        x = cmd[0]
#        if len(x) != 4:
#    	print "Bad format on line with", x
#    	sys.exit()
#        v1 = int(x[:2],16)
#        v2 = int(x[2:],16)
#    
#        csum =  (0 - (0x02 + 0xbc + v1 + v2)) & 0xff
#        print 'serial_cmd ":020000BC%02x%02x%02x"' % (v1,v2,csum)



# Here's the result from that python script -- to init the camera, first
# init the board with this cfg using initcam, then run the following from
# a .bat (windows) or .sh (unix) script 
#
# serial_cmd ":020000BCfc3412"
# serial_cmd ":020000BCfe0044"
# serial_cmd ":020000BCfe0044"
# serial_cmd ":020000BCfc3610"
# serial_cmd ":020000BCfee75d"
# serial_cmd ":020000BCfe0b39"
# serial_cmd ":020000BCfc380e"
# serial_cmd ":020000BCfe0044"
# serial_cmd ":020000BCfe0044"
# serial_cmd ":020000BCfc3a0c"
# serial_cmd ":020000BCfecf75"
# serial_cmd ":020000BCfe1133"
# serial_cmd ":020000BCc00181"
# serial_cmd ":020000BCd00171"
# serial_cmd ":020000BCe3015e"
# serial_cmd ":020000BCe26000"
# serial_cmd ":020000BCe17ae7"
# serial_cmd ":020000BCe06002"
# serial_cmd ":020000BCe70853"   # 12-bit img data, OR e72833 for COUNTER data
# serial_cmd ":020000BCff86bd"

