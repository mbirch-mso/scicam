#
# Basler Racer 4096-80km
# 4096 x 1024 x 12 x 4 taps
# 83.5 MHz pixel clock
#
# currently only the EDT PCIe8 DV C-Link suppports this camera.
# must be flashed with pe8dvcamlk_fm.bit or other full mode FPGA file
#

# camera description, for camera selection GUI and apps
#
camera_class:                  "Basler"
camera_model:                  "raL4096-80km"
camera_info:                   "4096x1024 4-tap 12-bit, extsync"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         4096
height:                        1024
depth:                         12
extdepth:                      12

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #channels
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of channels (taps) minus 1
#
CL_DATA_PATH_NORM:             3B

# camera link config register bits
# (argument is a 2-digit hex value, hexval shown in parens):
# 0 (01): RGB (on for RGB color cameras only)
# 1 (02): ignore data valid (on for most cameras though not all)
# 2 (04): generate an FVAL on every LVAL, for line scan cameras
# 3 (08): disable ROI (rarely set)
# 4 (10): generate an FVAL after every vactv lines, for line scan cameras
# 5 (20): data valid invert (rare)
# 6 (40): RGB swap -- swap red/blue
# 7 (80): enable roi pad: if ROI > img output, will pad missing bytes
#
CL_CFG_NORM:                   16

# EXSYNC Via (CC1) EDT Board Generated
#
MODE_CNTL_NORM: 10
method_camera_shutter_timing:	AIA_MCL_100US
method_frame_timing: FMRATE_ENABLE
frame_period: 13
xregwrite_16: 40
photo_trig: 1

# initalize the camera using Basler Binary Protocol II
#
# Freerun:			"01 01 04 04 01 04 00 00 00 00 00 03" 
# Triggered:		"01 01 04 04 01 04 00 01 00 00 00 03" 
# 
# Trigger Line OFF:	"01 01 04 04 03 04 00 00 00 00 00 03" 
# Trigger Line ON:	"01 01 04 04 03 04 00 01 00 00 00 03" 
# 
# Trig Source CC1:	"01 01 04 44 01 04 00 09 00 00 00 03" 
# 
# 82 MHz:			"01 01 04 44 07 00 00 17 00 00 00 03" 
# 83.5 MHz:		"01 01 04 44 07 00 00 1A 00 00 00 03" 
# 
# 4-tap:			"01 01 04 24 07 00 00 12 00 00 00 03"
# 
# 12-bit sensor:	"01 01 04 04 05 03 00 0c 00 00 00 03" 
# 
# 12-bit Pixel:		"01 01 08 24 00 03 00 05 00 00 00 00 00 00 00 03" 
# 
# test ptrn on:		"01 01 04 64 01 03 00 03 00 00 00 03" 
# test ptrn off:	"01 01 04 64 01 03 00 00 00 00 00 03" 

serial_binit: "010104040104000100000003 010104040304000100000003 010104440104000900000003 010104440700001A00000003 010104240700001200000003 010104040503000c00000003 01010824000300050000000000000003 010104640103000000000003"

# htaps/vtaps
#
htaps:	4
#vtaps:	1

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
hskip: 0
hactv: 4096
vskip: 0
vactv: 1024

