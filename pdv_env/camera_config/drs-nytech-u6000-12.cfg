camera_class:           "DRS-NYTECH"
camera_model:	 	"MBB U6000"
camera_info:	 	"12-bit infrared, single ch., freerun"

# board xilinx firmware -- almost always aiag.bit
#
rbtfile:		aiag.bit

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:			660
height:			488
depth:			12
extdepth:		12

# need to pad since this camera puts out odd number of bytes per line
# (and can't use ROI cuz its interlaced)
hwpad:	3


# shift register bits (hex):
# 0-3: value to barrel-shift data bits if cable not wired straight-thru
# 4: do aia swap of data bits end for end
# 5-7: undefined
#
shift:			00

# mask register bits (hex):
# any bits NOT set will be set to 0 in image
# set to match depth of camera
#
mask:			fff

# interlace method
# see camera configuration guide for more methods
# using xregwrite to force interlace bit (and EXTDEPTH) in datapath
# register -- should be done with interlace: 1 but this turns out to
# be incompatible with swinterlace methods in pdv_interlace
# -- don't forget to set this to 01 (turn off EXTDEPTH) if 8-bit
#
xregwrite_06:	21
method_interlace:	FIELD_INTLC

# serial_baud/mode -- mode RS232 sets HW register to match RS232 jumpers
# on the board -- MAKE SURE PCI DVA OR PCI DVFOX BOARD JUMPERS ARE SET
# FOR RS232 SERIAL!
#
serial_baud:	19200
method_serial_mode:	RS232

# serial_binit can be used to send us any serial commands to put
# the camera into a known state matching this board config.
# this config matches power-up for this camera so none are necessary
# but can be used if needed. Note that DRS wants checksum in last byte
# (not too clear from the documentation) so for example the FIRMWARE
# VERSION command would be 01 07 00 f8 f6, or by serial_binit:
#
#serial_binit "01 07 00 F8 F6"

