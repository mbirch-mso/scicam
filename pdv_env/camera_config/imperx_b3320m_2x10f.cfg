#
# CAMERA_MODEL 	"BOBCAT ICL-B3320"
#
# camera description, for camera selection GUI and apps
# camera_class should be the manufacturer's name
#
camera_class:                  "Imperx"
camera_model:                  "B3320M"
camera_info:                   "3312x2488 10-bit, 2-tap, freerun"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         3312
height:                        2488
depth:                         10
extdepth:                      10

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #taps
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of taps minus 1
#
CL_DATA_PATH_NORM:              19

# camera link config register bits
# (arg is a 2-digit hex value, hexval shown in parens):
# 0 (01): RGB (set for RGB (except bayer). Applies to older/PCI, ignored on newer/PCIe)
# 1 (02): ignore data valid (on for most cameras though not all)
# 2 (04): generate an FVAL on every LVAL or vactv lines if bit 4 is set, for line scan cameras
# 3 (08): disable ROI (rarely set)
# 4 (10): generate an FVAL after every vactv lines if bit 2 is also set, for line scan cameras
# 5 (20): data valid invert (rare)
# 6 (40): RGB swap -- swap red/blue
# 7 (80): enable roi pad: if ROI > img output, will pad missing bytes
#
CL_CFG_NORM:                   02

# htaps/vtaps: if multiple taps, set either htaps or vtaps to match the number
# of taps and whether they represent horizontal or vertical. Most common it's
# htaps (that is, pixels in parallel taps are from pixels next to each other on
# the same line) For example with a 2-tap 8-bit camera (CL_DATA_PATH_NORM: 17)
# where the two taps are from adjacent pixels on the same line, you would uncomment
# htaps and leave it at 2.
#
htaps: 2
#vtaps: 2

# interlace method
# only for interleaved and some dual tap cameras
# determines how image is deinterleaved for display -- WORD_INTLV is only
# one of many available methods -- see *_INTLV in pdv_dependent.h and
# camera configuration guide for more
#
#method_interlace:	WORD_INTLV

# initialize the camera using Imperx's hex command protocol
#
#	freerun:	"57 05 08 00 00 00 00"
#
# 	10-bit:		"57 01 00 00 00 00 01"
#
#	Dual tap:	"57 01 08 00 00 00 01"
#	Tap format:	"57 01 0c 00 00 00 04" # 2-tap sequential
#
#	Normal speed:	"57 06 08 00 00 00 00"
#	Overclocked:	"57 06 08 00 00 00 01"
#
#	test ptrn off:	"57 01 2c 00 00 00 00"
#	test ptrn on:	"57 01 2c 00 00 00 06"

# Use the following command for freerun, 10-bit, dual-tap, normal speed
serial_binit: "57050800000000 57010000000001 57010800000001 57010c00000004 57060800000000"

serial_baud: 		  115200
serial_timeout:		  1000

# Mode Control register (hex)
# Hex value -- the left-most nibble determines which CC line is toggled for
# the EXPOSE pulse (if method_camera_shutter_timing is other than AIA_SERIAL).
# The right-most nibble determines which of the CC lines are held permanently
# high or low.  Typically this is set automatically by merthod_camera_timing
# (to 10 hex for triggered and MCL modes, 00 otherwise).  However if your
# camera needs it set otherwise, use this directive to do so.
#
# Kepp CC1 high all the time
#MODE_CNTL_NORM: 	       01

# Region of Interest start and area (decimal)
# vskip/hskip is how many pixels to skip before ROI, vert and horiz
# vactv/hactv is how many pixels to DMA to memory after skip, vert and horiz
# if full frame is desired, you can leave these commented out or make them the
# same as the camera width/height. hskip/hactv can also be used to trim columns
# for cameras that output non-4-byte-aligned data to multiple of 4 bytes (in
# width) to ensure proper operation of windows applications that depend on
# 4-byte alignment, e.g. pdvshow
#
#hskip: 0
#hactv: 3312
#vskip: 0
#vactv: 2488

