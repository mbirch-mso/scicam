#
# clstest256.cfg
#
# EDT config file for use testing tiff image send / receive 
# with EDT CLS series camera simulator boards and supplied tiff images
# in tiffs256 directory. Package includes imagelist with these images listed
#
# This config is intended to for use with EDT tools to do a quick test
# of EDT CLS DMA output and optionally input to EDT DV series framegrabber
# board. The package as installed includes the directory "tiffs256" and 10
# tiff images: num0.tif, num1.tif, ... num9.tif. The supplied "imagelist" lists
# these images for use by send_tiffs, or use simple_clsend which just takes the
# directory the images are in as an argument. Assuming an EDT framegrabber enumerated
# as unit 0 and the EDT simulator as unit 1, an example command-line test would be as
# follows:
# 
#  initcam -u 0 -f camera_config/clstest256.cfg    (initialize the EDT FG board)
#  clsiminit -u 1 -f camera_config/clstest256.cfg  (initialize the EDT simulator board)
#  send_tiffs -u 1 imagelist -l 0                  (send all imgs listed in imagelist repeatedly)
#    OR
#  simple_clsend -u 1 -m -l 0 clstest256           (send all images in clstest256 dir repeatedly)
#
#  (in another window:)
#  take -u 0 -N 4 -l 100                           (grab 100 images and make sure no timeouts)
#    OR
#  pdvshow -pdv0                                   (use pdvshow to capture and view images)
#
# for more about the above applications / examples, see the source code for each, or run
# <appname> --help for usage.
#
# Note: in the above example, the framegrabber is unit 0, simulator is unit
# 1; use pciload to see how the system enumerated the devices in your system and
# adust the -u and -pdvN arguments accordingly.
#
# tiffs256 image checksums for EDT cls board simulator validation test (internal)
# CLS_IMGDATA_CKSUMS 690502121 1642800148 3210084708 154508796 543038191 2289173372 1820830426 4093782688 1373717373 855701636
#

# camera description
#
camera_class:                  "Generic"
camera_model:                  "CL simulator test"
camera_info:                   "256x256x8 bit (1-tap, freerun)"

# actual width/height (total pixels) and depth of data from camera
# to only grab high 8-bits, set depth to 8 but leave extdepth set
# to actual depth, and adjust shift and mask accordingly
#
width:                         256
height:                        256
depth:                         8
extdepth:                      8

# rbtfile is ignored for std camera link board but needed
# for DV FOX (fiberoptic) (v3.3.4.9 or later)
#
rbtfile: aiagcl.bit

# camera link data path register bits (argument is a 2-digit hex value):
# sets the expected input data size and #taps
# bits 0-3: number of bits per pixel minus 1
# bits 4-7: number of taps minus 1
#
CL_DATA_PATH_NORM:             07	# single tap
#CL_DATA_PATH_NORM:             17	# dual tap

# camera link config register bits
# (argument is a 2-digit hex value, hexval shown in parens):
# 0 (01): RGB (set for RGB (except bayer). Applies to older/PCI, ignored on newer/PCIe)
# 1 (02): ignore data valid (on for most cameras though not all)
# 2 (04): generate an FVAL on every LVAL or vactv lines if bit 4 is set, for line scan cameras
# 3 (08): disable ROI (rarely set)
# 4 (10): generate an FVAL after every vactv lines if bit 2 is also set, for line scan cameras
# 5 (20): data valid invert (rare)
# 6 (40): RGB swap -- swap red/blue
# 7 (80): enable roi pad: if ROI > img output, will pad missing bytes
#
CL_CFG_NORM:                   02


